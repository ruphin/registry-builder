#!/bin/bash

set -e

# Check if the script is run interactively
if [ -t 1 ]; then
	INTERACTIVE=true
fi

# Check if a domain name is provided
if [ "$INTERACTIVE" != true ] && [ -z $DOMAIN ]; then
	echo 'You must provide a domain name, or run interactively'
	echo 'Either pass `-it` or `-e DOMAIN=<domain>` to the docker run command'
	echo 'See https://github.com/ruphin/registry-builder for details'
fi

# Check if the docker socket is mounted
if [ ! -S '/var/run/docker.sock' ]; then
	echo 'You must bind the docker daemon socket when running this container'
	echo ''
	echo 'For example, to install in the current working directory:'
	echo 'docker run -v /var/run/docker.sock:/var/run/docker.sock \'
	echo '           -e INSTALLDIR=$PWD -v $PWD:/data -ti ruphin/registry-builder'
	echo ''
	exit 1
fi

# Check if an installation directory is provided
if [ -z $INSTALLDIR ] || [ ! -d /data ]; then
	echo 'You must provide an installation directory when running this container'
	echo ''
	echo 'For example, to install in the current working directory:'
	echo 'docker run -v /var/run/docker.sock:/var/run/docker.sock \'
	echo '           -e INSTALLDIR=$PWD -v $PWD:/data -ti ruphin/registry-builder'
	echo ''
	exit 1
fi

if [ -z $DOMAIN ]; then
	read -p 'Enter the domain name for this registry (e.g. hub.company.com): ' DOMAIN
	if [ -z $DOMAIN ] || [[ "$DOMAIN" =~ [^a-zA-Z0-9\.] ]]; then
		echo ' > Invalid domain name'
		echo ' > A domain name is required for SSL'
		echo ''
		echo -e "Exiting.\n"
		exit 1
	fi
fi

COMMON_NAME=$DOMAIN

echo ''
if [ "$INTERACTIVE" = true ]; then
	read -p 'Enter a port number for the registry (blank for default): ' PORT
fi

# Default to 443
if [ -z $PORT ]; then
	PORT=443
elif [[ "$PORT" =~ [^0-9] ]]; then
	echo ' > Invalid port number'
	echo ''
	echo -e "Exiting.\n"
	exit 1
fi

echo ''
if [ -f /data/certificates/$COMMON_NAME.key.gpg ] && [ -f /data/certificates/$COMMON_NAME.crt.gpg ]; then
	echo ' > Found encrypted SSL Certificates.'
	read -s -p "Enter a passphrase to decrypt: " SSL_ENCRYPTION_PASSPHRASE
	echo $SSL_ENCRYPTION_PASSPHRASE | gpg --decrypt --passphrase-fd 0 /data/certificates/$COMMON_NAME.key.gpg \
	     > /data/certificates/$COMMON_NAME.key
	echo $SSL_ENCRYPTION_PASSPHRASE | gpg --decrypt --passphrase-fd 0 /data/certificates/$COMMON_NAME.crt.gpg \
	     > /data/certificates/$COMMON_NAME.crt
	rm /data/certificates/$COMMON_NAME.key.gpg
	rm /data/certificates/$COMMON_NAME.crt.gpg
	echo ' > Succesfully decrypted your certificates. Continuing with SSL enabled...'
elif [ -f /data/certificates/$COMMON_NAME.key ] && [ -f /data/certificates/$COMMON_NAME.crt ]; then
	echo ' > Found SSL Certificates. Continuing with SSL enabled...'
else
	echo " > No SSL certificates found in $INSTALLDIR/certificates/"
	echo ' > Read https://github.com/ruphin/registry-builder for instructions to deploy'
	echo ' > with your own SSL certificates'
	echo ''
	read -p 'Generate self-signed certificates instead? [y/N] ' SELFSIGNED
	if [[ "$SELFSIGNED" =~ ^[Yy] ]]; then
		echo ''
		set +e
		docker run --rm -e COMMON_NAME=$COMMON_NAME -e KEY_NAME=$COMMON_NAME -v $INSTALLDIR/certificates:/certs centurylink/openssl 2> /tmp/openssl_out
		if [ $? -ne 0 ]; then
			cat /tmp/openssl_out
			echo ''
			echo ' > Certificate generation failed'
			echo -e "Exiting.\n"
			exit 1
		fi
		set -e
		echo " > Self-signed certificates generated for $COMMON_NAME"
		echo " > You will find them in $INSTALLDIR/certificates/"
		echo ''
		echo ' > Continuing with SSL enabled...'
	else
		echo ' > SSL is required. Install your certificates here:'
		echo " > $INSTALLDIR/$COMMON_NAME.crt"
		echo " > $INSTALLDIR/$COMMON_NAME.key"
		echo ' > Or let the installer generate self-signed certificates.'
		echo ''
		echo -e " > Exiting.\n"
		exit 1
	fi
fi

echo ''
echo ' > Setting up authentication...'
if [ "$INTERACTIVE" = true ]; then
	if [ -f /data/auth/registry.htpasswd ]; then
		echo " > Found $INSTALLDIR/auth/registry.htpasswd"
		read -p 'Use this for authorization? [Y/n] ' USE_EXISTING_HTPASSWD
		if [[ "$USE_EXISTING_HTPASSWD" =~ ^[Nn] ]]; then
			rm /data/auth/registry.htpasswd
		fi
	else
		echo ' > No $INSTALLDIR/auth/registry.htpasswd file found'
	fi
	if [ ! -f /data/auth/registry.htpasswd ]; then
		echo ' > Generating an htpasswd file interactively'
		echo ''
		read -p 'Enter a username: ' HTTP_AUTH_USERNAME
		if [ -z "$HTTP_AUTH_USERNAME" ] || [[ "$HTTP_AUTH_USERNAME" =~ [^a-zA-Z0-9] ]]; then
			echo 'Username cannot be empty'
			echo -e "Exiting.\n"
			exit 1
		fi
		read -s -p 'Enter a password: ' HTTP_AUTH_PASSWORD
		echo ''
		if [ -z "$HTTP_AUTH_PASSWORD" ]; then
			echo 'Password cannot be empty'
			echo -e "Exiting.\n"
			exit 1
		fi
		read -s -p 'Repeat the password: ' HTTP_AUTH_PASSWORD_REPEAT
		echo ''
		if [ "$HTTP_AUTH_PASSWORD" != "$HTTP_AUTH_PASSWORD_REPEAT" ]; then
			echo 'The entered passwords do not match.'
			echo -e "Exiting.\n"
			exit 1
		fi
		mkdir -p /data/auth
		echo "$HTTP_AUTH_PASSWORD" | docker run --rm -i ruphin/htpasswd "$HTTP_AUTH_USERNAME" > /data/auth/registry.htpasswd 2> /dev/null
		echo ''
		echo ' > Storing the credentials in an htpasswd file:'
		echo " > $INSTALLDIR/auth/registry.htpasswd"
	fi
else # Not running interactively
	if [ ! -f /data/auth/registry.htpasswd ]; then
		echo 'You must provide an authentication file here:'
		echo "$INSTALLDIR/auth/registry.htpasswd"
		echo 'Or run this program interactively by passing `-it` to the docker run command'
		exit 1
	fi
fi

echo ''
echo ' > Starting the registry'
echo ''

# Start redis
set +e
docker stop registry-redis 2> /dev/null
docker rm registry-redis 2> /dev/null
set -e
docker run -d --name registry-redis \
           redis

# Save the IP address of redis
REDIS_IP=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' registry-redis`

# Add config file for the registry
mkdir -p /data/registry
cp /store/config.yml /data/registry/config.yml

# Configure the Redis address
sed -i "s/<redis_ip>/$REDIS_IP/g" /data/registry/config.yml

# Generate a secret
SECRET=`openssl rand -hex 16`
sed -i "s/<secret>/$SECRET/g" /data/registry/config.yml

# Start registry v1
set +e
docker stop registry-v1 2> /dev/null
docker rm registry-v1 2> /dev/null
set -e
docker run -d --name=registry-v1 \
           -v $INSTALLDIR/registry/data:/data \
           -v $INSTALLDIR/registry/config.yml:/docker-registry/config/config.yml \
           -e DOCKER_REGISTRY_CONFIG=/docker-registry/config/config.yml \
           -e SETTINGS_FLAVOR=production \
           registry

# Save the IP address of the registry
REGISTRY_V1_IP=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' registry-v1`

# Start registry v2
set +e
docker stop registry-v2 2> /dev/null
docker rm registry-v2 2> /dev/null
set -e
docker run -d --name=registry-v2 \
           -v $INSTALLDIR/registry/data:/data \
           -v $INSTALLDIR/registry/config.yml:/docker-registry/config/config.yml \
           registry:2.0 /docker-registry/config/config.yml

# Save the IP address of the registry
REGISTRY_V2_IP=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' registry-v2`

# Add config file for nginx
mkdir -p /data/nginx
mv /store/nginx.conf /data/nginx/nginx.conf

# Set the common name for the SSL certificates
sed -i "s/\/FQDN\./\/$COMMON_NAME./g" /data/nginx/nginx.conf

# Set the correct domain name
if [ -z $DOMAIN ]; then
	sed -i '/server_name DOMAIN/d' /data/nginx/nginx.conf
else
	sed -i "s/server_name DOMAIN/server_name $DOMAIN/g" /data/nginx/nginx.conf
fi

# Set the correct upstream to the registry containers
sed -i "s/REGISTRY-V1-IP/$REGISTRY_V1_IP/g" /data/nginx/nginx.conf
sed -i "s/REGISTRY-V2-IP/$REGISTRY_V2_IP/g" /data/nginx/nginx.conf

# Start the nginx proxy
set +e
docker stop registry-nginx 2> /dev/null
docker rm registry-nginx 2> /dev/null
set -e
docker run -d --name registry-nginx -p $PORT:443  \
           -v $INSTALLDIR/certificates:/etc/nginx/certs \
           -v $INSTALLDIR/auth:/etc/nginx/htpasswd \
           -v $INSTALLDIR/nginx/nginx.conf:/etc/nginx/conf.d/default.conf \
           nginx


if [ "$PORT" != 443 ]; then
	PORT_SPEC=":$PORT"
else
	PORT_SPEC=""
fi

echo ''
echo ' > Done'
echo ' > If you generated your own SSL certificates, do not forget to install them'
echo ' > '
echo ' > For Ubuntu/Debian:'
echo " > Copy $INSTALLDIR/certificates/$COMMON_NAME.crt to your client machines"
echo " > Place the $COMMON_NAME.crt file in /usr/local/share/ca-certificates/"
echo ' > Run `sudo update-ca-certificates`'
echo ' > Run `sudo service docker restart`'
echo ''
echo ' > You can now use your registry:'
echo ''
echo 'docker pull debian'
echo "docker login -u <user> -p <pass> -e some@email.com https://$COMMON_NAME$PORT_SPEC"
echo "docker tag debian $COMMON_NAME$PORT_SPEC/mydebian"
echo "docker push $COMMON_NAME$PORT_SPEC/mydebian"
echo "docker pull $COMMON_NAME$PORT_SPEC/mydebian"